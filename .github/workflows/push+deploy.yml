name: Run tests and release
on:
  workflow_dispatch: # manual triggered
  push:
    branches:
      - master # other branches should be catched via PR
    tags:
      - v*
  pull_request:
  schedule:
    - cron: "0 0 1 * *"
jobs:
  lint:
    name: "Linting (ruff)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Install the project
        run: uv sync --locked --all-extras --dev
      - name: "Running ruff Python Linter"
        run: uv run ruff check --output-format=github .
      - name: "Running ruff formatter"
        if: success() || failure() # run this even if ruff before already failed, because we want to know the results
        run: uv run ruff format --diff
  unit-tests:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python-version }}'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Install the project
        run: uv sync --locked --all-extras --dev
      - name: 'Running pytest'
        run: uv run py.test --tb=short -k 'not pebble'
  integration:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      matrix:
        acme-server:
          - pebble
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python-version }}'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Install the project
        run: |
          uv sync --locked --all-extras --dev
          echo ".venv/bin" >> "${GITHUB_PATH}"
      - name: 'Preparing a test ACME server implementation'
        run: tests/scripts/setup-${{ matrix.acme-server }}.sh
      - name: 'Running pytest'
        run: tests/scripts/pytest-${{ matrix.acme-server }}.sh
      - name: 'Integration: generate certificate (venv)'
        run: tests/integration/gencert.py venv ${{ matrix.acme-server }}
      - name: 'Integration: generate certificate (docker)'
        run: tests/integration/gencert.py docker ${{ matrix.acme-server }}
      - name: 'Logs'
        if: failure()
        run: tests/scripts/logs-${{ matrix.acme-server }}.sh
  release:
    runs-on: ubuntu-latest
    needs:
      - lint
      - unit-tests
      - integration
    if: startsWith(github.ref, 'refs/tags/v')
    environment: pypi
    permissions:
      contents: read
      id-token: write
      packages: write
      attestations: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v2
        with:
          python-version: 3.13
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Build wheel
        run: uv build
      - name: Publish package
        run: uv publish

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/mswart/macen
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: mswart
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ghcr.io/mswart/macen
          subject-digest: ${{ steps.build-image.outputs.digest }}
          push-to-registry: true
